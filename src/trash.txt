$$$ exec p1
Plateau 15 17:
    01234567890123456
000 .................
001 .................
002 .................
003 .................
004 .................
005 .................
006 .................
007 .................
008 ..O..............
009 .................
010 .................
011 .................
012 ..............X..
013 .................
014 .................
Piece 2 2
**
**


*************
*************
*************
******O******
*****OOO*****
******O******
*************
*************
*************

*************
******O******
*****OOO*****
****OOOOO****
***OOOOOOO***
****OOOOO****
*****OOO*****
******O******
*************


ajouter des verifs dans get_player_id pour ce qu'il y a après le numéro du joueur
ajouter des verifs dans get_map_dimension (ft_strncmp)
est ce que les free dans allocate map se font bien? (if m->map free map, if m->piece free piece)


init - get player id 
	printf("line = %s\n", line);
	printf("%d\n", ft_strncmp(line, "$$$ exec p", 10));
	printf("line = %c\n", line[11]);

init - check_player_name
	if (!check_player_name(line))
		return (ft_error_free(&line, "player name is invalid\n"));

	int		check_player_name(char *line)
	{
		int check;

		check = 0;
		if (!ft_strncmp(line + 14, "nivergne.filler", 15))
			check = 1;
		else if (!ft_strncmp(line + 14, "hcao.filler", 11))
			check = 1;
		else if (!ft_strncmp(line + 14, "carli.filler", 12))
			check = 1;
		else if (!ft_strncmp(line + 14, "grati.filler", 12))
			check = 1;
		else if (!ft_strncmp(line + 14, "abanlin.filler", 14))
			check = 1;
		else if (!ft_strncmp(line + 14, "champely.filler", 15))
			check = 1;
		else if (!ft_strncmp(line + 14, "superjeannot.filler", 19))
			check = 1;
		if (check == 0)
			return (0);
		return (1);
	}

iller - play
	printf("p->map_fin_x = %d\np->map_fin_y = %d\n", p->map_fin_x, p->map_fin_y);

iller - map_iterate
	printf("m->piece_height = %d\nm->piece_width = %d\n", m->piece_height, m->piece_width);
	printf("p->map_y = %d\np->map_x = %d\n", p->map_y, p->map_x);
	printf("call get_dist_one%d\np->map_y = %d\np->map_x = %d\n", i, p->map_y, p->map_x);
	printf("fin\n");

istance - get_distance_one
	printf("p->piece_y = %d\n", p->piece_y);
	printf("p->piece_x = %d\n", p->piece_x);
	printf("%c\n", m->piece[p->piece_y][p->piece_x]);
	printf("distance = %d\n", p->distance);
	printf("map_fin_x = %d\nmap_fin_y = %d\n", p->map_fin_x, p->map_fin_y);

 int		get_dist_two(t_info *m, t_play *p)
 {
 	int i;
 	int j;
 	int x;
 	int y;

 	i = 0;
 	j = p->distance;
 	x = p->map_x + p->piece_x;
 	y = p->map_y + p->piece_y;
 	while (j >= 0 && x < m->map_width && y < m->map_height)
 	{
 		if ((y + j < m->map_height && x + i < m->map_width && m->map[y + j][x + i] == m->enemy_id)
 		|| ((y - j >= 0 && x + i < m->map_width && m->map[y - j][x + i] == m->enemy_id))
 		|| ((y + j < m->map_height && x - i >= 0 && m->map[y + j][x - i] == m->enemy_id))
 		|| ((y - j >= 0 && x - i >= 0 && m->map[y - j][x - i] == m->enemy_id)))
 			return (j);
 		i++;
 		j--;
 	}
 	return (0);
 }

 int		get_dist_one(t_info *m, t_play *p)
 {
 	int i = 0;
 	p->piece_y = 0;
 	while (p->piece_y < m->piece_height)
 	{
 		p->piece_x = 0;
 		while (p->piece_x < m->piece_width)
 		{
 			if (m->piece[p->piece_y][p->piece_x] == '*')
 			{
 				p->distance = 1;
 				while (p->distance <= p->best_distance)
 				{
 					i++;
 					 ft_printf("%d\n", i);
 					if (get_dist_two(m, p) != 0 && p->distance < p->best_distance)
 					{
 						p->best_distance = p->distance;
 						p->map_fin_x = p->map_x;
 						p->map_fin_y = p->map_y;
 					}
 					p->distance++;
 				}
 			}
 			p->piece_x++;
 		}
 		p->piece_y++;
 	}
 	return (1);
 }